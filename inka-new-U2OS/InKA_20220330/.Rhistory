for (i in seq_along(plot.names)) {
pdata   <- plot.data [1:4 + (i-1)*4]
kins    <- unique(unlist(lapply(pdata, function(x) x [, KINASE])))
pdt     <- data.table(KINASE = kins)
pdt <- Reduce(function(x,y) merge(x, y, by = "KINASE", all = TRUE), pdata)
pdt [is.na(pdt)] <- 0
setnames(pdt, c("Kinase", "Kinome", "ActLoop", "PSP", "NWK"))
pdt [, `:=` (Kin = Kinome + ActLoop, Sub = PSP + NWK) ]
pdt [, Score      := sqrt(Kin * Sub)]
pdt [, Rel.Score  := Score / max(Score)]
pdt [, Skew       := atan2(Sub, Kin) / (0.5*pi)]
dt <- pdt [, .SD, .SDcols = 1:10]
pn <- plot.names [i]
returns <- c(returns, list(dt))
names(returns)[i] <- pn
}
cat("Finished INKA score extraction.\n")
return(returns)
}
#
# ------------------------------------------------------------------------------------
#
append_inka_results <- function ( seq , inka ,add.name){
dt.tmp <- data.frame(inka$Kinase,inka$Score)
colnames(dt.tmp) <- c("Kinase",add.name)
merge(seq,dt.tmp,by="Kinase",all=TRUE)
}
#
# ------------------------------------------------------------------------------------
#
compose_pp_hat <- function (pp.all) {
rep(pp.all$ppModPeptide.ID,pp.all$Global.Counts)
}
#
# ------------------------------------------------------------------------------------
#
#
fabricate_inka_inputs <- function (pp.orig,ps.orig,pp.hat,pp.all,ps.all,
nonzero.spectral.counts,dtype) {
#   We select a bunch of peptides
pp.nrows <- nrow(pp.orig)
pp.idxs <- sample(pp.hat,pp.nrows)
pp.columns <- c("ppModPeptide.ID","Sequence","Proteins","Gene.names",
"Phospho..STY.","Phospho..STY..site.IDs")
pp <- pp.all[match(pp.idxs,pp.all$ppModPeptide.ID),pp.columns]
#   Now we add replace non-zero sample counts
sample.col.idxs <- grep(dtype,colnames(pp.orig))
sample.col.names <- colnames(pp.orig)[sample.col.idxs]
n.samples <- length(sample.col.idxs)
for (i in seq_along(sample.col.idxs)){
nz.idxs <- pp.orig[[ sample.col.idxs[i] ]] > 0
new.vals <- sample(nonzero.spectral.counts, sum(nz.idxs) )
new.df <- data.frame(counts=rep(0,pp.nrows))
new.df$counts [nz.idxs] <- new.vals
colnames(new.df) <- sample.col.names[i]
pp <- cbind(pp,new.df)
}
tmp.names <- colnames(pp)
tmp.names <- sub("Gene.names","Gene.Names",tmp.names)
colnames(pp) <- tmp.names
#   Construct the corresponding Phospho (STY)Sites.txt file
ps.ids <- unique(unlist(strsplit(pp$Phospho..STY..site.IDs,";")))
ps.colnames <- c("Proteins","Positions within proteins","Localization prob",
"Amino acid","Sequence window","Reverse","Contaminant","id","Mod. peptide IDs")
ps <- ps.all[match(ps.ids,ps.all$id),]
colnames(ps) <- ps.colnames
#   This is what we return
retval <- list(data.table(pp),data.table(ps))
names(retval) <- c("PP","PS")
return (retval)
}
#
# ------------------------------------------------------------------------------------
#
inka_plotdata_mangle <- function (kin,act,psp,nwk,dtype,sample.names) {
foldSort( relabel( c(getData(kin,dtype), getData(act,dtype), getData2(psp,dtype), getData2(nwk,dtype)),
sample.names,dtype) )
}
#
# ------------------------------------------------------------------------------------
#
find_sample_data_indices <- function (raw,dtype,sample.name) {
object.names <- names(raw)
kin.tag <- paste0(dtype,".",sample.name,"_Kinome")
act.tag <- paste0(dtype,".",sample.name,"_ActivationLoop")
psp.tag <- paste0(dtype,".",sample.name,"_PhosphoSitePlus")
nwk.tag <- paste0(dtype,".",sample.name,"_NetworKIN")
kin.idx <- match(kin.tag,object.names)
act.idx <- match(act.tag,object.names)
psp.idx <- match(psp.tag,object.names)
nwk.idx <- match(nwk.tag,object.names)
retval <- c(kin.idx,act.idx,psp.idx,nwk.idx)
return(retval)
}
#
# ------------------------------------------------------------------------------------------------------
#
extract_sample_dataset <- function ( raw,dtype,sname ){
data.idxs <- find_sample_data_indices(raw,dtype,sname)
retval <- raw[data.idxs]
return(retval)
}
#
opl_pp_read <- function ( filename,dtype=NULL,labfile="labels.txt" ){
if(is.null(dtype)){
dtype <- "Spectral.Counts"
}
raw <- fread(filename, integer64 = "numeric")
raw$Gene.names <- gsub("\"","",sub("=","",raw$Gene.names))
colnames(raw) <- sub("Gene.names","Gene.Names",colnames(raw))
samples <- grep(dtype,colnames(raw))
if (length(samples) == 0){
colnames(raw) <- sub("OPL.ppCount.",paste0(dtype,"."),colnames(raw))
}
if(file.exists(labfile)){
cat("Found label file. Fixing names.\n")
labs <- read.delim(labfile,sep="\t",stringsAsFactors=FALSE,header=FALSE)
# Get rid of obnoxious names
labs[[ncol(labs)]] <- sub("\\.+$","",sub("^\\.+","",make.names(labs[[ncol(labs)]])))
colnames(raw) <- opl_fix_colnames(raw,dtype,labs)
}
#   And here we filter out only phosphorylated peptides
cat("Selecting only phosphorylated peptides...")
raw <- raw[ raw$Phospho..STY. > 0 ,]
cat(" Ready.\n")
return(raw)
}
#
# ------------------------------------------------------------------------------------------------------
#
opl_fix_colnames <-function ( pp, dtype, lab.defs ){
old.names <- colnames(pp)
last.col <- ncol(lab.defs)
new.names <- make.names(lab.defs[,last.col])
for (i in 1:nrow(lab.defs)){
in.string  <- paste0(dtype,".",lab.defs[i,1],"$")
out.string <- paste0(dtype,".",new.names[i])
old.names  <- sub(in.string,out.string,old.names)
}
return(old.names)
}
#
# ------------------------------------------------------------------------------------------------------
#
trimComponents <- function(edges) {
cln1_2 <- names(edges) [1:2]
EE     <- copy(edges)
setnames(EE, c("V1", "V2", names(EE)[-(1:2)]))
vertices <- EE [, .(VERTEX = unique(c(V1, V2)))]
VV <- copy(vertices)
VV [, `:=` (Discovered = FALSE, Processed = FALSE)]
component <- 0
proceed   <- TRUE
while(proceed) {
component <- component + 1
VV [1, Discovered := TRUE]
tagger <- VV [1, VERTEX]
tagged <- EE [grep(tagger, Vertex.Pair), unique(c(V1,V2))]
VV [VERTEX %in% tagged, Discovered := TRUE]
VV [1, Processed := TRUE]
continue <- TRUE
while(continue) {
taggers <- VV [Discovered & !Processed, VERTEX]
if(length(taggers) > 0) {
for(tagger in taggers){
tagged <- EE [grep(tagger, Vertex.Pair), unique(c(V1,V2))]
VV [VERTEX %in% tagged, Discovered := TRUE]
VV [VERTEX == tagger, Processed := TRUE]
}
} else continue <- FALSE
}
marked <- VV [{Discovered}, VERTEX]
vertices [VERTEX %in% marked, sprintf("Component%s", component) := 1]
VV <- VV [{! Discovered}]
if(nrow(VV) == 0) proceed <- FALSE
}
vertices[is.na(vertices)] <- 0
tmp <- names(vertices)
setcolorder(vertices, c(1, order(colSums(vertices[, -1]), decreasing = TRUE) + 1))
setnames(vertices, tmp)
major.vertices  <- vertices[Component1 == 1, VERTEX]
EE <- EE [V1 %in% major.vertices]
setnames(EE, c(cln1_2, names(EE)[-(1:2)]))
return(EE)
}
# ----------------------------
prepare_KSR <-function (psp_ps_tab,nwk_ps_tab,actloop,kinase.symbols,dtype,hgnc.full ){
colnames(psp_ps_tab) <- make.names(colnames(psp_ps_tab))
colnames(nwk_ps_tab) <- make.names(colnames(nwk_ps_tab))
KSR <- merge(x   = psp_ps_tab,
y   = nwk_ps_tab,
by  = c("KINASE", "SUBSTRATE", "Ppeptide.Id", "Psite.Id", "Accession_AApos"), all = TRUE)
KSR [, SUBSTRATE := gene2hgnc(SUBSTRATE,hgnc.full,sloppy=TRUE)]
dtnames <- names(psp_ps_tab)
snames  <- dtnames [grep(dtype, dtnames)]
snames  <- sapply(snames, function(x) str_sub(x, start = nchar(dtype)+2))
KSR [, `:=` ( Source      = mapply(function(x,y) { if(is.na(x)) "NWK" else if(is.na(y)) "PSP" else "Both" },
Sequence.x, Sequence.y),
Vertex.Pair = mapply(function(x,y) { paste(sort(c(x, y)), collapse = " ") }, KINASE, SUBSTRATE),
Sub.is.Kin  = SUBSTRATE %in% kinase.symbols,
Auto.Phos   = KINASE == SUBSTRATE,
Loop.Site   = Ppeptide.Id %in% actloop$Ppeptide.Id ) ]
for (i in seq_along(snames)) {
tmp <- paste0(dtype,".",snames[i])
clm <- grep(tmp, names(KSR))
KSR [, paste0(tmp, ".pepSIGNAL") := rowSums(.SD, na.rm = TRUE), .SDcols = clm]
KSR [Source == "Both"] [, paste0(tmp,".pepSIGNAL") := eval(as.name(paste0(tmp, ".pepSIGNAL"))) / 2]
KSR [, paste0(tmp, ".SIGNAL") := sum(eval(as.name(paste0(tmp, ".pepSIGNAL")))), by = .(KINASE, Accession_AApos)]
}
rmv <- unlist(sapply(c("[.](x|y)$", "P(site|peptide)[.]Id", "[.]pepSIGNAL"), function(x) grep(x, names(KSR))))
KSR <- KSR [, .SD, .SDcols = -rmv]
KSR <- KSR [! duplicated(paste(KINASE, Accession_AApos))]
return(list(snames=snames,KSR=KSR))
}
# ----------------------------
select_sample_KSR <- function (KSR,snames,sname,dtype){
sname.simplified <- gsub("\\.\\.*","\\.",sname)
leaveout.names <- paste0(dtype,".",snames[snames != sname.simplified],".SIGNAL")
clm   <- match(leaveout.names, names(KSR) )
EDGES <- if(sum(!is.na(clm)) > 0) KSR [, .SD, .SDcols = -clm] else copy(KSR)
col.idx <- grep ("SIGNAL",colnames(EDGES))
colnames(EDGES)[col.idx] <- "SIGNAL"
EDGES <- EDGES [SIGNAL > 0]
return(EDGES)
}
#
# ----------------------------
#
generate_KSR_network <- function (EDGES,
inka,
sname,
kinase.symbols,
signal_cutoff    = NULL,
topN             = NULL,
major_component  = FALSE,
plot_large       = TRUE,
non_Kinase_sides = 50,
obs_Kinase_sides = 6,
inf_Kinase_sides = 4,
palette_steps    = 100,
pal_color_from   = "white",
pal_color_to     = "red",
non_Kinase_color = "#DBDBDB",
edge_colors      = c(PSP  = "coral", NWK  = "cornflowerblue", Both = "forestgreen")
) {
#
# Prerequisites of this function
#
# EDGES:
#      - KINASE
#      - SUBSTRATE
#      - Source
#      - Vertex.Pair
#      - SIGNAL
#
# inka
#      - Kinase names on first column (name irrelevan)
#      - Score
#
# signal.cutoff ">2"
#
# sname "Name on the plot"
#
# kinase.symbols "A list of kinase names"
#
cat("Creating KSR network....")
kinase.colors <- colorRampPalette(c(pal_color_from, pal_color_to))(palette_steps + 1)
setnames(inka, c("VERTEX", names(inka)[-1]))
setorder(inka, -Score, na.last = TRUE)
if(! is.null(signal_cutoff)) {
cutoff.operator <- str_replace_all(signal_cutoff, "[0-9]", "")
cutoff.value    <- as.integer(str_replace_all(signal_cutoff, "[<>=]", ""))
operator.name   <- c("Greater","GreaterEq", "LessEq","Less")[c(">",">=", "<=", "<") %in% cutoff.operator]
EDGES <- EDGES [mapply(cutoff.operator, SIGNAL, cutoff.value)]
}
if(! is.null(topN)) {
topN.kinases <- inka [1:topN, VERTEX]
EDGES <- EDGES [KINASE %in% topN.kinases | SUBSTRATE %in% topN.kinases]
}
# This is not used. I don't know whether it works or
# what it does.
if(major_component) {
EDGES <- trimComponents(EDGES)
}
n.vertices <- nrow(EDGES)
cat("Number of edges : ",n.vertices,"\n")
if (n.vertices){
EDGES [, N.Edges := .N, by = Vertex.Pair]
EDGES [, N.Forward.Edges := .N, by = .(KINASE, SUBSTRATE)]
EDGES [, N.Reverse.Edges := N.Edges - N.Forward.Edges]
EDGES [, Curve := 0.1*(1:.N), by = .(KINASE, SUBSTRATE)]
EDGES [, Color.Idx := match(Source, c("PSP", "NWK", "Both"))]
EDGES [, Rel.Signal := SIGNAL / max(SIGNAL)]
#       Here, he puts all kinases and substrates in
#       a column called VERTEX
VERTICES <- EDGES [, .(VERTEX = unique(c(KINASE, SUBSTRATE)))]
#       He adds a Score column (the InKA score), substrates have NA...
#       ALSO a "Kinome-named column should be added here
VERTICES <- merge(x  = VERTICES,
y  = inka,
by = "VERTEX", all.x = TRUE)
VERTICES [, is.Kinase := VERTEX %in% kinase.symbols]
#       Here shape and color are derived from fact whether vertex is kinase or not
VERTICES [, Sides := ifelse(! is.Kinase, non_Kinase_sides,
ifelse(Kinome > 0, obs_Kinase_sides, inf_Kinase_sides))]
VERTICES [, Color := ifelse(! is.Kinase, non_Kinase_color,
kinase.colors [round(100 * Rel.Score) + 1])]
#       -------------------------------------------------------------------
#
VERTICES [, Loop.Site := VERTEX %in% EDGES[{Loop.Site}, SUBSTRATE]]
#
#       -------------------------------------------------------------------
VERTICES[is.na(VERTICES)] <- 0
VERTICES$VERTEX <- as.character(VERTICES$VERTEX)
NW <- network(EDGES,
vertex.attr = VERTICES,
loops       = TRUE,
multiple    = TRUE,
matrix.type = "edgelist",
ignore.eval = FALSE)
size       <- network.size(NW)
layout.par <- list(niter              = size * 100,
area               = size^1.8,
repulse.rad        = size^1.5,
ncell              = size^3)
set.seed(1)
plot.network(NW,
new           = TRUE,
arrowhead.cex = 5,
boxed.labels  = if(plot_large) FALSE else TRUE,
coord         = network.layout.fruchtermanreingold(NW, layout.par),
displaylabels = TRUE,
edge.col      = edge_colors [NW %e% "Color.Idx"],
edge.curve    = 0.75 * NW %e% "Curve",
edge.lty      = 1,
edge.lwd      = 1 + 25 * (NW %e% "Rel.Signal"),
edge.steps    = 50,
label.bg      = "#000000",
label.border  = "#000000",
label.cex     = if(plot_large) 0.5 else 0.4,
label.col     = if(plot_large) "#000000" else "#FFFFFF",
label.pad     = 0.2,
label.pos     = 5,
loop.cex      = 1,
loop.steps    = 20,
mode          = "fruchtermanreingold",
object.scale  = 0.001,
suppress.axes = TRUE,
usearrows     = TRUE,
usecurve      = TRUE,
vertex.border = ifelse(VERTICES$Loop.Site, "#4D4D4D", "#333333"),
vertex.cex    = if(plot_large) 25 else 15,
vertex.col    = NW %v% "Color",
vertex.lty    = 1,
vertex.lwd    = if(plot_large) ifelse(VERTICES$Loop.Site, 3, 1) else
ifelse(VERTICES$Loop.Site, 3, 1),
vertex.sides  = NW %v% "Sides",
vertices.last = TRUE)
mtext(sname, side = 3, cex = 1.5, line = 1, font =2)
} else {
textplot("Not enough data for network.")
}
cat("Ready.\n")
}
#
# ------------------------------------------------------------------------------------------------------
#
extract_mq_version <- function ( pp.file ){
first.line <- readLines(pp.file, n=1)
c.names <- unlist(strsplit(first.line,split="\t"))
found <- grep("ontaminant",c.names)
if (length(found)==0){
version <- "1.5"
}
else {
if (c.names[found] == "Potential contaminant"){
version <- "1.5"
}
else {
version <- "1.4"
}
}
return(version)
}
#
# ------------------------------------------------------------------------------------------------------
#
extract_substrate_corr_factors <- function ( kin.list ){
kin.count <- table(as.character(kin.list))
tmp.names <- names(kin.count)
kin.count <- as.vector(kin.count)
names(kin.count) <- tmp.names
kin.count <- 1/kin.count
}
#
# ------------------------------------------------------------------------------------------------------
#
extract_psp_substrate_corr_factors <- function (psp){
extract_substrate_corr_factors(psp$Gene.Symbol.HGNC21Apr2016)
}
#
# ------------------------------------------------------------------------------------------------------
#
extract_nwk_substrate_corr_factors <- function (nwk){
extract_substrate_corr_factors(nwk$Kinase.HGNC)
}
#
# ------------------------------------------------------------------------------------------------------
#
cat("This is inka.R version ",inka.script.version,"\n")
cat("Loading necessary structures...")
UniProt_data  <- loadf(paste0(general.resources.dir,"/","UniProt_data_08Jun2016.Rdata"))
PSP_human     <- loadf(paste0(general.resources.dir,"/","PSP_human_03Jul2016.Rdata"))
PSP_KSR_human <- loadf(paste0(general.resources.dir,"/","PSP_KSR_human_03Jul2016.Rdata"))
Kinases       <- loadf(paste0(general.resources.dir,"/","Kinases_HGNC2017.01.20_v2.Rdata"))
hgnc.resources.file <- paste0(general.resources.dir,"/","complete-HGNC-21Apr2016.csv")
hgnc.full           <- read.csv2(hgnc.resources.file,stringsAsFactors=FALSE)
phomics.path        <- paste0(general.resources.dir,"/","phomics_global_output.txt")
phomics.global      <- fread(phomics.path)
nwk.global.path     <- paste0(general.resources.dir,"/","TOP_NWK_nwk_proteome_unprot_ref_2014.Rdata")
load(nwk.global.path)
#####
##newdataset
cell <-(read.delim("4cell_top10_0.99.txt",sep="\t",stringsAsFactors=TRUE,header=TRUE))
cell <- as.data.table(cell)
#class(cell)
row <- nrow(cell)
#class(TOP_NWK$Accession_AApos)
#dim(TOP_NWK)
TOP_NWK <- TOP_NWK[1:row,]
TOP_NWK$Kinase.HGNC <- as.character(cell$Kinase.HGNC)
TOP_NWK$Accession_AApos <-as.character(cell$Accession_AApos)
#class(TOP_NWK$Accession_AApos)
################
cat(" Done.\n")
mapgen     <- "Gene.Symbol.HGNC21Apr2016"
dtype      <- "Spectral.Count"
# Here we construct kinase substrate correction factors.
# Init
substrate.correction.object <- NULL
if (subs.corr.flag){
cat("Constructing substrate correction factors...")
psp.subs.corr.fact <- extract_psp_substrate_corr_factors(PSP_KSR_human)
nwk.subs.corr.fact <- extract_nwk_substrate_corr_factors(TOP_NWK)
substrate.correction.object <- list(psp=psp.subs.corr.fact,nwk=nwk.subs.corr.fact)
cat(" Ready.\n")
}
#mq.version <- "1.5"
mq.version <- extract_mq_version(ps.filepath)
cat("Detected MAxQuant version ",mq.version,"\n")
pp.orig.1CL <- opl_pp_read(pp.filepath,dtype)
samples <- sub(paste0(dtype,"."),"",colnames(pp.orig.1CL)[grep(dtype,colnames(pp.orig.1CL))])
cat("Extracted sample names:\n")
for ( i in seq_along(samples)){
cat(" ",samples[i])
if(i %% 10 == 0) cat ("\n")
}
cat("\n")
cat("Reading phospho-site file:",ps.filepath,"..")
ps.orig.1CL <- read_mq_ps_file(ps.filepath,mq.version)
cat(" Ready.\n")
# ---
# Filter annotation step
# output of filter_annotate: list(report_PP,geneWise_report_PP,nonRed_classI_PS_PP)
save_table <- function ( dat,filename ){
write.table(dat,file=filename,sep="\t",row.names=FALSE,quote=FALSE)
}
fa_results.1CL <- filter_annotate( pp.orig.1CL,ps.orig.1CL,UniProt_data,PSP_human,PSP_KSR_human,mq.version)
kin.1CL        <- generate_kinome_pdata(convert_to_valid_geneWise(fa_results.1CL[[2]],hgnc.full),Kinases,mapgen)
actloop.1CL    <- generate_act_loop_pdata(phomics.global,kin.1CL,Kinases,mapgen,dtype)
psp.1CL        <- generate_PSP_pdata(fa_results.1CL[[3]],PSP_KSR_human,mapgen,dtype)
if (dump.substrate.flag){
save_table(psp.1CL,"PSP_substrates.txt")
}
nwk.1CL        <- generate_NWK_pdata(TOP_NWK,fa_results.1CL[[3]],dtype,mapgen)
if (dump.substrate.flag){
save_table(nwk.1CL,"NWK_substrates.txt")
}
full.data <- inka_plotdata_mangle(kin.1CL,actloop.1CL,psp.1CL,nwk.1CL,dtype,samples)
cat("Preparing for drawing KS networks.\n")
netKSR <- prepare_KSR (psp.1CL,nwk.1CL,actloop.1CL,Kinases$Gene.Symbol.HGNC21Apr2016,dtype,hgnc.full )
cat("Writing output to PDF file ",inka.pdf.output.filename,"\n")
document.title <- paste0("InKAscore.org phosphoproteomics data analysis version ",inkascore.version,
" running algorithm version ",inka.script.version)
pdf(file=inka.pdf.output.filename,paper="a4",width=8,height=11,
title=document.title)
save.sample.names <- make.names(samples)
for (i in seq_along(samples)){
this.sample <- samples[i]
par(new=FALSE)
cat(i,") Sample ",samples[i]," being added to report.\n")
full.sample <- extract_sample_dataset(full.data,dtype,samples[i])
frame <- c(0.05,0.95,0.75,1.0)
make_kinase_bar_plot(full.sample,samples[i],frame)
inka.data <- kinase_condense_data(full.sample)
par(new=TRUE)
frame <- c(0.05,0.95,0.4,0.7)
inka.save <- make_inka_plot(inka.data,samples[i],mapgen,Kinases,frame,tiox.flag=tiox.mode,
kinome.correction=kinome.correction.object,
substrate.correction=substrate.correction.object)
write.table(inka.save,file=paste0("inka_save_",save.sample.names[i],".txt"),row.names=FALSE,quote=FALSE,sep="\t")
frame <- c(0.05,0.45,0.0,0.35)
make_inka_barplot(inka.save,this.sample,frame)
frame <- c(0,1.0,0.0,0.9)
if (plot.network.flag){
par(fig=frame,new=FALSE)
generate_KSR_network(select_sample_KSR(netKSR[["KSR"]],netKSR[["snames"]],samples[i],dtype) ,
inka.save,samples[i],Kinases$Gene.Symbol.HGNC21Apr2016,signal_cutoff = network.link.threshold,
topN = 20)
}
}
dev.off()
